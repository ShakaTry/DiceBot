name: 🔍 CodeQL Security Analysis

# Advanced security scanning with CodeQL
# Runs on schedule and PR for comprehensive coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ================================================================
  # 🔍 CODEQL ANALYSIS - Deep security scanning
  # ================================================================
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # Add other languages if needed: 'javascript', 'java', 'csharp', etc.
    
    steps:
    - name: 📂 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: codeql-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          codeql-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-
          
    - name: 🔧 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Custom queries for enhanced security
        queries: +security-and-quality
        config: |
          name: "DiceBot CodeQL Config"
          queries:
            - uses: security-and-quality
            - uses: security-extended
          paths-ignore:
            - "tests/**"
            - "docs/**"
            - "scripts/**"
            - "*.md"
            
    - name: 📦 Install dependencies for analysis
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        
    - name: 📊 Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ../results/

  # ================================================================
  # 🛡️ ADVANCED SECURITY SCAN - Multi-tool security analysis
  # ================================================================
  advanced-security:
    name: 🛡️ Advanced Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep
        
    - name: 🔒 Bandit Security Scan
      run: |
        bandit -r src/ -f json -o bandit-results.json || true
        bandit -r src/ -f txt | tee bandit-results.txt || true
        
    - name: 🛡️ Safety Vulnerability Check
      run: |
        safety check --json --output safety-results.json || true
        safety check | tee safety-results.txt || true
        
    - name: 🔍 Semgrep Static Analysis
      run: |
        semgrep --config=auto --json --output=semgrep-results.json src/ || true
        semgrep --config=auto --text --output=semgrep-results.txt src/ || true
        
    - name: 🔒 TruffleHog Secrets Scan
      run: |
        docker run --rm -v "$PWD:/pwd" \
          trufflesecurity/trufflehog:latest git file:///pwd \
          --json --no-verification > trufflehog-results.json || true
          
    - name: 📊 Security Report Summary
      run: |
        echo "# 🔒 DiceBot Security Analysis Report" > security-summary.md
        echo "" >> security-summary.md
        echo "## 🛡️ Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Bandit results
        echo "### 🔒 Bandit (Python Security)" >> security-summary.md
        if [ -f bandit-results.json ]; then
          BANDIT_ISSUES=$(jq '.results | length' bandit-results.json 2>/dev/null || echo "0")
          echo "- Issues found: $BANDIT_ISSUES" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        # Safety results
        echo "### 🛡️ Safety (Dependency Vulnerabilities)" >> security-summary.md
        if [ -f safety-results.json ]; then
          SAFETY_VULNS=$(jq 'length' safety-results.json 2>/dev/null || echo "0")
          echo "- Vulnerabilities found: $SAFETY_VULNS" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        # Semgrep results
        echo "### 🔍 Semgrep (Static Analysis)" >> security-summary.md
        if [ -f semgrep-results.json ]; then
          SEMGREP_FINDINGS=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
          echo "- Findings: $SEMGREP_FINDINGS" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        # TruffleHog results
        echo "### 🔒 TruffleHog (Secrets Detection)" >> security-summary.md
        if [ -f trufflehog-results.json ]; then
          SECRETS_FOUND=$(jq '. | length' trufflehog-results.json 2>/dev/null || echo "0")
          echo "- Potential secrets: $SECRETS_FOUND" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "---" >> security-summary.md
        echo "*Generated on: $(date)*" >> security-summary.md
        
        cat security-summary.md
        
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          *-results.json
          *-results.txt
          security-summary.md
        retention-days: 30
        
    - name: 📊 Create Security Issue (on failures)
      if: failure()
      run: |
        echo "Security scan detected issues - would create GitHub issue here"
        # Uncomment to auto-create issues:
        # gh issue create --title "🔒 Security Alert" --body "Security scan found issues in run ${{ github.run_number }}"

  # ================================================================
  # 🔐 DEPENDENCY AUDIT - Supply chain security
  # ================================================================
  dependency-audit:
    name: 🔐 Dependency Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
        
    - name: 🔍 Audit Dependencies
      run: |
        pip-audit --format=json --output=pip-audit-results.json || true
        pip-audit --format=text | tee pip-audit-results.txt || true
        
    - name: 📊 Dependency Report
      run: |
        echo "# 🔐 Dependency Security Audit" > dependency-report.md
        echo "" >> dependency-report.md
        
        if [ -f pip-audit-results.json ]; then
          VULNS=$(jq '.vulnerabilities | length' pip-audit-results.json 2>/dev/null || echo "0")
          echo "## Results: $VULNS vulnerabilities found" >> dependency-report.md
          echo "" >> dependency-report.md
          
          if [ "$VULNS" -gt "0" ]; then
            echo "### 🚨 Vulnerabilities:" >> dependency-report.md
            jq -r '.vulnerabilities[] | "- **\(.package)** \(.installed_version): \(.vulnerability.summary)"' pip-audit-results.json >> dependency-report.md 2>/dev/null || true
          else
            echo "✅ No vulnerabilities detected!" >> dependency-report.md
          fi
        fi
        
        echo "" >> dependency-report.md
        echo "*Scan completed: $(date)*" >> dependency-report.md
        
        cat dependency-report.md
        
    - name: 📤 Upload Dependency Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-audit-${{ github.run_number }}
        path: |
          pip-audit-results.*
          dependency-report.md
        retention-days: 30

  # ================================================================
  # 📢 SECURITY NOTIFICATION - Alert on critical findings
  # ================================================================
  security-notify:
    name: 📢 Security Notification
    runs-on: ubuntu-latest
    needs: [codeql, advanced-security, dependency-audit]
    if: always()
    
    steps:
    - name: 📊 Security Status
      run: |
        echo "🔒 Security Analysis Complete"
        echo "CodeQL: ${{ needs.codeql.result }}"
        echo "Advanced Security: ${{ needs.advanced-security.result }}"
        echo "Dependency Audit: ${{ needs.dependency-audit.result }}"
        
        if [[ "${{ needs.codeql.result }}" == "failure" || "${{ needs.advanced-security.result }}" == "failure" || "${{ needs.dependency-audit.result }}" == "failure" ]]; then
          echo "⚠️ Security issues detected - review required"
          exit 1
        else
          echo "✅ All security checks passed"
        fi
