name: 🚀 DiceBot Production Pipeline

# Optimized concurrency management
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily simulation at 9am UTC
    - cron: '0 9 * * *'

env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: 'v1'

jobs:
  # ================================================================
  # 🧪 QUALITY GATES - Fast feedback loop
  # ================================================================
  quality:
    name: 🧪 Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: quality-${{ env.CACHE_VERSION }}-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml', '.pre-commit-config.yaml') }}
        restore-keys: |
          quality-${{ env.CACHE_VERSION }}-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🔍 Lint with ruff (parallel)
      run: ruff check --output-format=github src tests
      
    - name: 📝 Format check (parallel)
      run: ruff format --check src tests
      
    - name: 🔬 Type checking (parallel)
      run: pyright src tests

  # ================================================================
  # 🧪 TESTS - Comprehensive coverage
  # ================================================================
  tests:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: quality
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          .pytest_cache
        key: tests-${{ env.CACHE_VERSION }}-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          tests-${{ env.CACHE_VERSION }}-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: ✅ Run tests with high coverage
      run: pytest --cov=dicebot --cov-report=xml --cov-report=term --cov-fail-under=90 -v
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # ================================================================
  # 🔒 SECURITY - Zero tolerance
  # ================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
        
    - name: 🛡️ Security linting with bandit
      run: bandit -r src/ -f json -o bandit-report.json || true
      
    - name: 🔍 Dependency vulnerability check
      run: safety check --json --output safety-report.json || true
      
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: "*-report.json"
        retention-days: 30

  # ================================================================
  # 📦 BUILD & PACKAGE
  # ================================================================
  build:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [tests, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install build tools
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: 🔨 Build package
      run: python -m build
      
    - name: 🔍 Check package
      run: python -m twine check dist/*
      
    - name: 📋 Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dicebot-package-${{ github.run_number }}
        path: dist/
        retention-days: 90

  # ================================================================
  # 🚀 DEPLOY - Railway auto-deployment
  # ================================================================
  deploy:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      
    - name: ✅ Deployment trigger
      run: |
        echo "🚀 Railway auto-deployment triggered"
        echo "📊 Commit: ${{ github.sha }}"
        echo "🔗 URL: https://dicebot-production-bba9.up.railway.app"

  # ================================================================
  # 🎲 SIMULATIONS - Daily production testing
  # ================================================================
  simulations:
    name: 🎲 Daily Simulations
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [tests, security]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📂 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install DiceBot
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: 🎯 Conservative Strategy
      run: |
        python -m DiceBot simulate \
          --capital 100 \
          --strategy fibonacci \
          --preset conservative \
          --sessions 30 \
          --output-file conservative_daily.json
          
    - name: 🚀 Aggressive Strategy
      run: |
        python -m DiceBot simulate \
          --capital 200 \
          --strategy adaptive \
          --preset aggressive \
          --sessions 20 \
          --output-file aggressive_daily.json
          
    - name: 📈 Strategy Comparison
      run: |
        python -m DiceBot compare \
          --capital 150 \
          --strategies martingale fibonacci composite \
          --sessions 15 \
          --output-file daily_comparison.json
          
    - name: 📋 Upload simulation results
      uses: actions/upload-artifact@v3
      with:
        name: simulation-results-${{ github.run_number }}
        path: "*.json"
        retention-days: 30

  # ================================================================
  # 📢 NOTIFICATIONS - Slack integration
  # ================================================================
  notify:
    name: 📢 Slack Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [deploy, simulations]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🎉 Success notification
      if: needs.deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          ✅ **DiceBot Production Pipeline SUCCESS!**
          
          🔄 **Branch:** main
          📝 **Commit:** ${{ github.sha }}
          🚀 **Railway:** https://dicebot-production-bba9.up.railway.app
          📊 **Tests:** All passed with 90%+ coverage
          🔒 **Security:** Clean scan
          
          🎲 Ready for production use!
          
    - name: ❌ Failure notification
      if: needs.deploy.result == 'failure' || needs.tests.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          ❌ **DiceBot Production Pipeline FAILED!**
          
          🔄 **Branch:** main
          📝 **Commit:** ${{ github.sha }}
          💥 **Error:** Check GitHub Actions logs
          
          🔧 Action required: Fix the pipeline!
